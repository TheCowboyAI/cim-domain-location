//! Location commands

use crate::{LocationType, Address, GeoCoordinates, VirtualLocation};
use cim_domain::{Command, EntityId};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

/// Define a new location
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DefineLocation {
    /// Location's unique ID (generated by caller)
    pub location_id: Uuid,
    /// Location name
    pub name: String,
    /// Location type (physical, virtual, logical, hybrid)
    pub location_type: LocationType,
    /// Physical address (for physical locations)
    pub address: Option<Address>,
    /// Geographic coordinates (for physical locations)
    pub coordinates: Option<GeoCoordinates>,
    /// Virtual location details (for virtual locations)
    pub virtual_location: Option<VirtualLocation>,
    /// Parent location (for hierarchies)
    pub parent_id: Option<Uuid>,
}

/// Marker for location aggregate
#[derive(Debug)]
pub struct LocationAggregate;

impl Command for DefineLocation {
    type Aggregate = LocationAggregate;

    fn aggregate_id(&self) -> Option<EntityId<Self::Aggregate>> {
        Some(EntityId::from_uuid(self.location_id))
    }
}
